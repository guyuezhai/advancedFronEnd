const data=
  [
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/40",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/40/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/40/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/40/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/40",
      "id": 697675047,
      "node_id": "MDU6SXNzdWU2OTc2NzUwNDc=",
      "number": 40,
      "title": "git reset、git revert 和 git checkout 有什么区别",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-09-10T09:31:26Z",
      "updated_at": "2020-09-10T09:31:26Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "这个问题同样也需要先了解一下git仓库的三个组成部分：\r\n\r\n1. 工作区（workspace）: 在git管理下的正常目录都算是工作区，我们平时的编辑工作都是在工作区完成的\r\n2. 暂存区（stage）：临时区域。里面存放将要提交文件的快照\r\n3. 历史记录区（history）：git commit 后的记录区域\r\n\r\n三个区的转换关系以及转换所使用的命令：\r\n\r\n![gitresetrevert](https://user-images.githubusercontent.com/24433701/92711294-06e69580-f38b-11ea-84c1-0376c907dc50.png)\r\n\r\n`git reset`、`git revert`和`git checkout`的共同点：用来撤销代码仓库中的某些更改。\r\n\r\n不同点：\r\n\r\n从commit层面说起：\r\n- `git reset` 可以将一个分支的末端指向之前的一个commit。然后下次git执行垃圾回收的时候，会把这个commit之后的commit都扔掉。`git reset` 还支持三种标记，用来标记reset指令影响的范围：\r\n\r\n    - --mixed: 会影响到暂存区和历史记录区。也是默认选项\r\n    - --soft：只影响历史记录区\r\n    - --hard：影响工作区、暂存区和历史记录区\r\n\r\n> **注意：** 因为git reset是直接删除commit记录，从而会影响到其它开发人员的分支，所以不要在公共分支比如（develop）做这个操作\r\n\r\n- `git checkout` 可以将HEAD移到一个新的分支，并更新工作目录。因为可能会覆盖本地的修改，所以执行这个指令前，你需要`stash`或者`commit`暂存区和工作区的更改。\r\n- `git revert` 和 `git reset` 的目的是一样，但做法不同,他会以创建新的commit的方式来撤销commit，这样能保留之前的commit历史，比较安全。另外，同样因为可能会覆盖本地的修改，所以执行这个指令前，你需要stash或者commit暂存区和工作区的更改。\r\n\r\n然后，从文件层面来说：\r\n\r\n- `git reset` 只是把文件从历史记录区拿到暂存区，不影响工作区的内容，而且不支持 --mixed、--soft、--hard\r\n- `git checkout` 则是把文件从暂存区拿到工作区，不影响暂存区的内容。\r\n\r\n    - 当执行`git rm --cached`命令时，会直接从暂存区删除文件，工作区则不会做出改变\r\n    - 当执行 `git checkout .` 或者 `git checkout --` 命令时，会用暂存区**全部**或**指定**的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动\r\n    - 当执行`git checkout HEAD .` 或者`git checkout HEAD` 命令时，会用HEAD指向的master分支中的全部或者部分文件替换暂存区以及工作区的文件。这个命令也是具有危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动\r\n- `git revert` 不支持文件层面的操作\r\n\r\n",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/39",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/39/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/39/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/39/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/39",
      "id": 697492162,
      "node_id": "MDU6SXNzdWU2OTc0OTIxNjI=",
      "number": 39,
      "title": "rebase 与 merge的区别?",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-09-10T06:22:12Z",
      "updated_at": "2020-09-10T06:22:12Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "git rebase 和 git merge一样都是用于从一个分支获取并合并到当前分支\r\n\r\n假设一个场景，就是我们开发的`feature/todo`分支要合并到`master`主分支，那么用`rebase`或者`merge`有什么不同呢\r\n\r\n![git merge](https://user-images.githubusercontent.com/24433701/92688464-f4129780-f36f-11ea-9cd3-bcbb67d07a9d.png)\r\n- merge特点：自动创建一个新的commit如果合并的时候遇到冲突，仅需要修改后重新commit\r\n- 优点：记录了真实的commit情况，包括每个分支的详情\r\n- 缺点：因为每次的merge会自动产生一个merge commit，所以在使用一些git的GUI tools，特别是commit比较频繁的时候，看到分支很杂乱。\r\n\r\n![gitrebase](https://user-images.githubusercontent.com/24433701/92688536-173d4700-f370-11ea-82d4-bfddfc4b7b10.png)\r\n\r\n- rebase特点：会合并之前的commit历史\r\n- 优点：得到更简洁的项目历史，去掉了merge commit\r\n- 缺点：如果合并出现代码问题不容易定位，因为re-write了history\r\n\r\n因此，当需要保留详细的合并信息的时候建议使用`git merge`，特别是需要将分支合并进入master分支是；当发现自己修改某个功能时，频繁进行了git commit提交时，发现其实过多的提交信息没有必要时，可以选择`git rebase`",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/38",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/38/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/38/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/38/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/38",
      "id": 697474833,
      "node_id": "MDU6SXNzdWU2OTc0NzQ4MzM=",
      "number": 38,
      "title": "你的git工作流是怎样的?",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-09-10T05:57:04Z",
      "updated_at": "2020-09-10T05:57:04Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "GitFlow是由Vincent Driessen提出的一个Git操作流程规范，包含以下几个关键分支\r\n\r\n| 名称 | 说明 |\r\n|:---:|:---:|\r\n|master|主分支|\r\n|develop|主开发分支,包含确定即将发布的代码|\r\n|feature|新功能分支，一般一个新功能对应一个分支，对于功能的拆分需要比较合理，以避免一些后面不必要的冲突|\r\n|release|发布分支，发布时候用的分支，一般测试时候发现的bug在这个分支就行修复|\r\n|hotfix|hotfix分支，紧急修复bug的时候用|\r\n\r\nGitFlow的优势有如下几点:\r\n- 并行开发：GitFlow可以很方便的实现并行开发，每个新功能都会建立一个新的feature分支，从而和已经完成的功能隔离开来，而且只有在新功能完成开发的情况下，其对应的feature分支才会合并到主分支上(也就是我们经常说的develop分支)。另外，如果你正在开发某个功能，同时又有一个新的功能需要开发，你只需要提交当前的feature代码，然后创建另外一个feature分支并完成新的功能开发，然后再切回之前的feature分支即可继续完成之前的功能开发。\r\n- 协作开发：GitFlow还支持多人协同开发，因为每个feature分支上改动的代码都只是为了让某个新的feature可以独立运行。同时我们也很容易知道每个人在干啥\r\n- 发布阶段：当一个新的feature开发完成的时候，他会被合并到develop分支，这个分支主要用来暂时保存那些还没有发布的内容，所以如果需要开发新的feature，我们只需要从develop分支创建新分支，即可包含所有已经完成的feature。\r\n- 支持紧急修复：GitFlow还包含了hotfix分支。这种类型的分支是从某个已经发布的tag上创建出来并做一个紧急的修复，而且这个紧急修复只影响这个已经发布的tag，而不会影响到你正在开发的新feature\r\n\r\n然后就是GitFlow最经典的几张流程图\r\n \r\n\r\n`feature`分支都是从`develop`分支创建，完成后再合并到`develop`分支，等待发布。\r\n\r\n当需要发布时，我们从`develop`分支创建一个`release`分支\r\n\r\n然后这个`release`分支会发布到测试环境进行测试，如果发现问题就在这个分支上直接进行修复。在所有问题修复之前，我们会不停的重复**发布->测试->修复->重新发布->重新测试**这个流程。\r\n发布结束后，这个`release`分支会合并到`develop`分支和`master`分支，从而保证不会有代码丢失。\r\n\r\n`master`分支值只能跟踪已经发布的代码，合并到`master`分支上的`commit`只能来自`release`分支和`hotfix`分支\r\n\r\n`hotfix`分支的作用是紧急修改一些bug。\r\n他们都是从`master`分支上的某个tag建立，修复结束后再合并到`develop`和`master`分支上\r\n\r\n[更多工作流参考阮老师的Git工流程](https://www.ruanyifeng.com/blog/2015/12/git-workflow.html)\r\n",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/37",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/37/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/37/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/37/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/37",
      "id": 697305091,
      "node_id": "MDU6SXNzdWU2OTczMDUwOTE=",
      "number": 37,
      "title": "Webpack",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-09-10T01:35:40Z",
      "updated_at": "2020-09-10T01:35:40Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "# webpack与grunt、gulp的不同？\r\nGrunt、Gulp是基于任务运行的工具：\r\n\r\n它们会自动执行指定的任务，就像流水线，把资源放上去然后通过不同插件进行加工，它们包含活跃的社区，丰富的插件，能方便的打造各种工作流。\r\n\r\nWebpack是基于模块化打包的工具:\r\n\r\n自动化处理模块,webpack把一切当成模块，当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。\r\n\r\n因此这是完全不同的两类工具,而现在主流的方式是用npm script代替Grunt、Gulp,npm script同样可以打造任务流。\r\n\r\n# webpack、rollup、parcel优劣？\r\n\r\n- webpack适用于大型复杂的前端站点构建: webpack有强大的loader和插件生态,打包后的文件实际上就是一个立即执行函数，这个立即执行函数接收一个参数，这个参数是模块对象，键为各个模块的路径，值为模块内容。立即执行函数内部则处理模块之间的引用，执行模块等,这种情况更适合文件依赖复杂的应用开发.\r\n\r\n- rollup适用于基础库的打包，如vue、d3等: Rollup 就是将各个模块打包进一个文件中，并且通过 Tree-shaking 来删除无用的代码,可以最大程度上降低代码体积,但是rollup没有webpack如此多的的如代码分割、按需加载等高级功能，其更聚焦于库的打包，因此更适合库的开发.\r\n\r\n- parcel适用于简单的实验性项目: 他可以满足低门槛的快速看到效果,但是生态差、报错信息不够全面都是他的硬伤，除了一些玩具项目或者实验项目不建议使用\r\n\r\n# 有哪些常见的Loader？\r\n\r\n- `file-loader`：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件\r\n- `url-loader`：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去\r\n- `source-map-loader`：加载额外的 Source Map 文件，以方便断点调试\r\n- `image-loader`：加载并且压缩图片文件\r\n- `babel-loader`：把 ES6 转换成 ES5\r\n- `css-loader`：加载 CSS，支持模块化、压缩、文件导入等特性\r\n- `style-loader`：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。\r\n- `eslint-loader`：通过 ESLint 检查 JavaScript 代码\r\n\r\n# 有哪些常见的Plugin？\r\n\r\n- `define-plugin`：定义环境变量\r\n- `html-webpack-plugin`：简化html文件创建\r\n- `uglifyjs-webpack-plugin`：通过UglifyJS压缩ES6代码\r\n- `webpack-parallel-uglify-plugin`: 多核压缩,提高压缩速度， node 是单线程的，但node能够fork子进程，基于此，`webpack-parallel-uglify-plugin` 能够把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程，从而实现并发编译，进而大幅提升js压缩速度\r\n- `webpack-bundle-analyzer`: 可视化webpack输出文件的体积\r\n- `mini-css-extract-plugin`: CSS提取到单独的文件中,支持按需加载\r\n\r\n```js\r\nconst ParallelUglifyPlugin = require('webpack-parallel-uglify-plugin');\r\n\r\n// ...\r\noptimization: {\r\n    minimizer: [\r\n        new ParallelUglifyPlugin({ // 多进程压缩\r\n            cacheDir: '.cache/',\r\n            uglifyJS: {\r\n                output: {\r\n                    comments: false,\r\n                    beautify: false\r\n                },\r\n                compress: {\r\n                    warnings: false,\r\n                    drop_console: true,\r\n                    collapse_vars: true,\r\n                    reduce_vars: true\r\n                }\r\n            }\r\n        }),\r\n    ]\r\n}\r\n```\r\n# 分别介绍bundle，chunk，module是什么\r\n\r\n- bundle：是由webpack打包出来的文件\r\n- chunk：代码块，一个chunk由多个模块组合而成，用于代码的合并和分割\r\n- module：是开发中的单个模块，在webpack的世界，一切皆模块，一个模块对应一个文件，webpack会从配置的entry中递归开始找出所有依赖的模块\r\n\r\n# Loader和Plugin的不同？\r\n\r\n**不同的作用：**\r\n- Loader直译为\"加载器\"。Webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到loader。 所以Loader的作用是让webpack拥有了加载和解析_非JavaScript文件_的能力。\r\n- Plugin直译为\"插件\"。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。\r\n\r\n**不同的用法：**\r\n\r\n- Loader在module.rules中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个Object，里面描述了对于什么类型的文件（test），使用什么加载(loader)和使用的参数（options）\r\n- Plugin在plugins中单独配置。 类型为数组，每一项是一个plugin的实例，参数都通过构造函数传入。\r\n\r\n# webpack的构建流程是什么?\r\n\r\nWebpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：\r\n\r\n1. 初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；\r\n2. 开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；\r\n3. 确定入口：根据配置中的 entry 找出所有的入口文件；\r\n4. 编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；\r\n5. 完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；\r\n6. 输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；\r\n7. 输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。\r\n\r\n在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果\r\n\r\n# 是否写过Loader和Plugin？描述一下编写loader或plugin的思路？\r\n\r\nLoader像一个\"翻译官\"把读到的源文件内容转义成新的文件内容，并且每个Loader通过链式操作，将源文件一步步翻译成想要的样子。\r\n\r\n编写Loader时要遵循单一原则，每个Loader只做一种\"转义\"工作。 每个Loader的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用this.callback()方法，将内容返回给webpack。 还可以通过 this.async()生成一个callback函数，再用这个callback将处理后的内容输出出去。 此外webpack还为开发者准备了开发loader的工具函数集——loader-utils。\r\n\r\n相对于Loader而言，Plugin的编写就灵活了许多。 webpack在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。\r\n\r\n# webpack的热更新是如何做到的？说明其原理？\r\n\r\nwebpack的热更新又称热替换（Hot Module Replacement），缩写为HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。\r\n\r\n**原理：**\r\n\r\n![webpack热更新原理图](https://user-images.githubusercontent.com/24433701/92671437-d847cb00-f348-11ea-8e1f-6b8e9e5ba3b6.jpg)\r\n\r\n\r\n首先要知道server端和client端都做了处理工作\r\n\r\n- 第一步，在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。\r\n- 第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。\r\n- 第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念。\r\n- 第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。\r\n- webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。\r\n- HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。\r\n- 而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。\r\n- 最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。\r\n\r\n> 详细原理解析来源于知乎饿了么前端[Webpack HMR 原理解析](https://zhuanlan.zhihu.com/p/30669007)\r\n\r\n# 如何用webpack来优化前端性能？\r\n\r\n用webpack优化前端性能是指优化webpack的输出结果，让打包的最终结果在浏览器运行快速高效\r\n\r\n- 压缩代码：删除多余的代码、注释、简化代码的写法等等方式。可以利用webpack的`UglifyJsPlugin`和`ParallelUglifyPlugin`来压缩JS文件，利用`cssnano`(css-loader?minimize)来压缩css\r\n- 利用CDN加速：在构建过程中，将引用的静态资源路径修改CDN上对应的路径。可以利用webpack的`output`参数和各loader的`publicPath`参数来修改资源路径\r\n- Tree Shaking:将代码中永远不会走到的片段删除掉，可以通过在启动webpack时追加参数 `--optimize-minimize`来实现\r\n- Code Splitting:将代码按路由维度或者组件分块（chunk）,这样做到按需加载，同时可以充分利用浏览器缓存\r\n- 提取公共第三方库：`SpliitChunksPlugin`插件来进行公共模块抽离，利用浏览器缓存可以长期缓存这些无需频繁变动的公共代码\r\n\r\n# 如何提高webpack的打包速度\r\n\r\n- HappyPack：利用进程并行编译loader，利用缓存来使得rebuild更快，遗憾的是作者表示已经不会再继续开发此项目，类似的替代者是[thread-loader](https://github.com/webpack-contrib/thread-loader)\r\n- [外部扩展（externals）](https://webpack.docschina.org/configuration/externals/): 将不怎么需要更新的第三方库脱离webpack打包，不被打入bundle中，从而减轻少打包时间，比如jQuery用script标签引入\r\n- dll: 采用webpack的DllPlugin和DllReferencePlugin引入dll，让一些基本不会变动的代码打包成静态资源，避免反复编译浪费时间\r\n- 利用缓存：`webpack.cache`、`bable-loader.cacheDirectory`、`HappyPack.cache`都可以利用缓存提高rebuild效率\r\n- 缩小文件搜索的范围：比如babel-loader插件，如果你的文件仅存在与src中，那么可以使用`include:path.resolve(__dirname,'src')`,当然绝大多数情况下这种操作的提升有限，除非不小心build了`node_modules`文件\r\n\r\n> 实战文章推荐[使用webpack4提升180%编译速度Tool](https://louiszhai.github.io/2019/01/04/webpack4/)\r\n\r\n# 如何提高webpack的构建速度\r\n- 多入口情况下，使用`CommonsChunkPlugin`（webpack4中已废弃）来提取公共代码，在webpack4中由`optimization.splitChunks`和`optimization.runtimeChunk`替代，前者拆分代码，后者提取runtime代码。原来的`CommonsChunkPlugin`产出模块时，会包含重复的代码，并且无法优化异步模块，minchunks的配置也较复杂，`splitChunks`解决了这个问题；另外将`optimization.runtimeChunk`设置为true或{name:\"manifest\"},便能将入口模块中的runtime部分提取出来\r\n- 通过`externals`配置来提取常用库\r\n- 利用`DllPlugin`和`DllReferencePlugin`预编译资源模块，通过`DllPlugin`来对那些我们引用引用绝对不会修改的npm包来进行预编译，再使用`DllReferencePlugin`将预编译的模块加载进来\r\n- 使用`HappyPack`或者[thread-loader](https://github.com/webpack-contrib/thread-loader)来实现多线程加速编译\r\n- 使用`webpack-uglify-parallel`来提升`uglifyPlugin`的压缩速度。原理上`webpack-uglify-parallel`采用多核并行压缩来提升压缩的速度\r\n- 使用`Tree-shaking`和`Scope Hoisting`来剔除多余的代码\r\n\r\nwebpack4 的默认配置\r\n```js\r\noptimization: {\r\n    minimize: env === 'production' ? true : false, // 开发环境不压缩\r\n    splitChunks: {\r\n        chunks: \"async\", // 共有三个值可选：initial(初始模块)、async(按需加载模块)和all(全部模块)\r\n        minSize: 30000, // 模块超过30k自动被抽离成公共模块\r\n        minChunks: 1, // 模块被引用>=1次，便分割\r\n        maxAsyncRequests: 5,  // 异步加载chunk的并发请求数量<=5\r\n        maxInitialRequests: 3, // 一个入口并发加载的chunk数量<=3\r\n        name: true, // 默认由模块名+hash命名，名称相同时多个模块将合并为1个，可以设置为function\r\n        automaticNameDelimiter: '~', // 命名分隔符\r\n        cacheGroups: { // 缓存组，会继承和覆盖splitChunks的配置\r\n            default: { // 模块缓存规则，设置为false，默认缓存组将禁用\r\n                minChunks: 2, // 模块被引用>=2次，拆分至vendors公共模块\r\n                priority: -20, // 优先级\r\n                reuseExistingChunk: true, // 默认使用已有的模块\r\n            },\r\n            vendors: {\r\n                test: /[\\\\/]node_modules[\\\\/]/, // 表示默认拆分node_modules中的模块\r\n                priority: -10\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nsplitChunks是拆包优化的重点，如果你的项目中包含element-ui等第三方组件（组件比较大），建议单独拆包，如下所示\r\n```js\r\nsplitChunks: {\r\n    // ...\r\n    cacheGroups: {    \r\n        elementUI: {\r\n            name: \"chunk-elementUI\", // 单独将 elementUI 拆包\r\n            priority: 15, // 权重需大于其它缓存组\r\n            test: /[\\/]node_modules[\\/]element-ui[\\/]/\r\n        }\r\n    }\r\n}\r\n```\r\nloader 解析速度如何提升。同 webpack-parallel-uglify-plugin 插件一样，HappyPack 也能实现并发编译，从而可以大幅提升 loader 的解析速度， 如下是部分配置。\r\n```js\r\nconst HappyPack = require('happypack');\r\nconst happyThreadPool = HappyPack.ThreadPool({ size: os.cpus().length });\r\nconst createHappyPlugin = (id, loaders) => new HappyPack({\r\n    id: id,\r\n    loaders: loaders,\r\n    threadPool: happyThreadPool,\r\n    verbose: process.env.HAPPY_VERBOSE === '1' // make happy more verbose with HAPPY_VERBOSE=1\r\n});\r\n```\r\n对于前面 loader: \"happypack/loader?id=happy-babel\" 这句，便需要在 plugins 中创建一个 happy-babel 的插件实例。\r\n```js\r\nplugins: [\r\n    createHappyPlugin('happy-babel', [{\r\n        loader: 'babel-loader',\r\n        options: {\r\n            babelrc: true,\r\n            cacheDirectory: true // 启用缓存\r\n        }\r\n    }])\r\n]\r\n```\r\n另外，像 vue-loader、css-loader 都支持 happyPack 加速，如下所示。\r\n```js\r\nplugins: [\r\n    createHappyPlugin('happy-css', ['css-loader', 'vue-style-loader']),\r\n    new HappyPack({\r\n        loaders: [{\r\n            path: 'vue-loader',\r\n            query: {\r\n                loaders: {\r\n                    scss: 'vue-style-loader!css-loader!postcss-loader!sass-loader?indentedSyntax'\r\n                }\r\n            }\r\n        }]\r\n    })\r\n]\r\n```\r\n1. 我们都知道，webpack打包时，有一些框架代码是基本不变的，比如说 babel-polyfill、vue、vue-router、vuex、axios、element-ui、fastclick 等，这些模块也有不小的 size，每次编译都要加载一遍，比较费时费力。使用 DLLPlugin 和 DLLReferencePlugin 插件，便可以将这些模块提前打包。\r\n\r\n```js\r\n//webpack.dll.config.js\r\nconst webpack = require(\"webpack\");\r\nconst path = require('path');\r\nconst CleanWebpackPlugin = require(\"clean-webpack-plugin\");\r\nconst dllPath = path.resolve(__dirname, \"../src/assets/dll\"); // dll文件存放的目录\r\n\r\nmodule.exports = {\r\n    entry: {\r\n        // 把 vue 相关模块的放到一个单独的动态链接库\r\n        vue: [\"babel-polyfill\", \"fastclick\", \"vue\", \"vue-router\", \"vuex\", \"axios\", \"element-ui\"]\r\n    },\r\n    output: {\r\n        filename: \"[name]-[hash].dll.js\", // 生成vue.dll.js\r\n        path: dllPath,\r\n        library: \"_dll_[name]\"\r\n    },\r\n    plugins: [\r\n        new CleanWebpackPlugin([\"*.js\"], { // 清除之前的dll文件\r\n            root: dllPath,\r\n        }),\r\n        new webpack.DllPlugin({\r\n            name: \"_dll_[name]\",\r\n            // manifest.json 描述动态链接库包含了哪些内容\r\n            path: path.join(__dirname, \"./\", \"[name].dll.manifest.json\")\r\n        }),\r\n    ],\r\n};\r\n```\r\n接着， 需要在 package.json 中新增 dll 命令。\r\n```json\r\n\"scripts\": {\r\n    \"dll\": \"webpack --mode production --config build/webpack.dll.config.js\"\r\n}\r\n```\r\n运行 npm run dll 后，会生成 ./src/assets/dll/vue.dll-[hash].js 公共js 和 ./build/vue.dll.manifest.json 资源说明文件，至此 dll 准备工作完成，接下来在 webpack 中引用即可。\r\n```js\r\nexternals: {\r\n    'vue': 'Vue',\r\n    'vue-router': 'VueRouter',\r\n    'vuex': 'vuex',\r\n    'elemenct-ui': 'ELEMENT',\r\n    'axios': 'axios',\r\n    'fastclick': 'FastClick'\r\n},\r\nplugins: [\r\n    ...(config.common.needDll ? [\r\n        new webpack.DllReferencePlugin({\r\n            manifest: require(\"./vue.dll.manifest.json\")\r\n        })\r\n    ] : [])\r\n]\r\n```\r\ndll 公共js轻易不会变化，假如在将来真的发生了更新，那么新的dll文件名便需要加上新的hash，从而避免浏览器缓存老的文件，造成执行出错。由于 hash 的不确定性，我们在 html 入口文件中没办法指定一个固定链接的 script 脚本，刚好，add-asset-html-webpack-plugin 插件可以帮我们自动引入 dll 文件。\r\n```js\r\nconst autoAddDllRes = () => {\r\n    const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');\r\n    return new AddAssetHtmlPlugin([{ // 往html中注入dll js\r\n        publicPath: config.common.publicPath + \"dll/\",  // 注入到html中的路径\r\n        outputPath: \"dll\", // 最终输出的目录\r\n        filepath: resolve(\"src/assets/dll/*.js\"),\r\n        includeSourcemap: false,\r\n        typeOfAsset: \"js\" // options js、css; default js\r\n    }]);\r\n};\r\n\r\n// ...\r\nplugins: [\r\n    ...(config.common.needDll ? [autoAddDllRes()] : [])\r\n]\r\n```\r\n# 怎么配置单页面应用、多页面应用\r\n\r\n单页面应用可以理解为webpack的标准模式，直接在`entry`中指定单页面应用的入口即可\r\n\r\n多页面应用的话，可以使用webpack的`AutoWebPlugin`来完成简单自动化的构建，但是前提是项目的目录结构也必须遵守他预设的规范。\r\n\r\n**多页面应用注意事项：**\r\n\r\n- 每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。\r\n- 随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置\r\n",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/35",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/35/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/35/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/35/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/35",
      "id": 690819349,
      "node_id": "MDU6SXNzdWU2OTA4MTkzNDk=",
      "number": 35,
      "title": "请把俩个数组['A1', 'A2', 'B1', 'B2', 'C1', 'C2', 'D1', 'D2'] 和['A', 'B', 'C', 'D']，合并为 ['A1', 'A2', 'A', 'B1', 'B2', 'B', 'C1', 'C2', 'C', 'D1', 'D2', 'D']",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304115719,
          "node_id": "MDU6TGFiZWwyMzA0MTE1NzE5",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/%E7%AE%97%E6%B3%95",
          "name": "算法",
          "color": "fbca04",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2020-09-02T08:18:28Z",
      "updated_at": "2020-09-02T09:57:28Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/34",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/34/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/34/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/34/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/34",
      "id": 690651955,
      "node_id": "MDU6SXNzdWU2OTA2NTE5NTU=",
      "number": 34,
      "title": "Virtual DOM 真的比操作原生 DOM 快吗？谈谈你的想法。",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-09-02T01:49:49Z",
      "updated_at": "2020-09-02T01:49:49Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "> 采用尤大大的回答：\r\n> \r\n> ### 1. 原生 DOM 操作 vs. 通过框架封装操作。\r\n> 这是一个性能 vs. 可维护性的取舍。框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。针对任何一个 benchmark，我都可以写出比任何框架更快的手动优化，但是那有什么意义呢？在构建一个实际应用的时候，你难道为每一个地方都去做手动优化吗？出于可维护性的考虑，这显然不可能。框架给你的保证是，你在不需要手动优化的情况下，我依然可以给你提供过得去的性能。\r\n> \r\n> ### 2. 对 React 的 Virtual DOM 的误解。\r\n> React 从来没有说过 “React 比原生操作 DOM 快”。React 的基本思维模式是每次有变动就整个重新渲染整个应用。如果没有 Virtual DOM，简单来想就是直接重置 innerHTML。很多人都没有意识到，在一个大型列表所有数据都变了的情况下，重置 innerHTML 其实是一个还算合理的操作... 真正的问题是在 “全部重新渲染” 的思维模式下，即使只有一行数据变了，它也需要重置整个 innerHTML，这时候显然就有大量的浪费。\r\n> \r\n> 我们可以比较一下 innerHTML vs. Virtual DOM 的重绘性能消耗：\r\n> \r\n> * innerHTML:  render html string O(template size) + 重新创建所有 DOM 元素 O(DOM size)\r\n> * Virtual DOM: render Virtual DOM + diff O(template size) + 必要的 DOM 更新 O(DOM change)\r\n> \r\n> Virtual DOM render + diff 显然比渲染 html 字符串要慢，但是！它依然是纯 js 层面的计算，比起后面的 DOM 操作来说，依然便宜了太多。可以看到，innerHTML 的总计算量不管是 js 计算还是 DOM 操作都是和整个界面的大小相关，但 Virtual DOM 的计算量里面，只有 js 计算和界面大小相关，DOM 操作是和数据的变动量相关的。前面说了，和 DOM 操作比起来，js 计算是极其便宜的。这才是为什么要有 Virtual DOM：它保证了 1）不管你的数据变化多少，每次重绘的性能都可以接受；2) 你依然可以用类似 innerHTML 的思路去写你的应用。\r\n> \r\n> ### 3. MVVM vs. Virtual DOM\r\n> 相比起 React，其他 MVVM 系框架比如 Angular, Knockout 以及 Vue、Avalon 采用的都是数据绑定：通过 Directive/Binding 对象，观察数据变化并保留对实际 DOM 元素的引用，当有数据变化时进行对应的操作。MVVM 的变化检查是数据层面的，而 React 的检查是 DOM 结构层面的。MVVM 的性能也根据变动检测的实现原理有所不同：Angular 的脏检查使得任何变动都有固定的\r\n> O(watcher count) 的代价；Knockout/Vue/Avalon 都采用了依赖收集，在 js 和 DOM 层面都是 O(change)：\r\n> \r\n> * 脏检查：scope digest O(watcher count) + 必要 DOM 更新 O(DOM change)\r\n> * 依赖收集：重新收集依赖 O(data change) + 必要 DOM 更新 O(DOM change)可以看到，Angular 最不效率的地方在于任何小变动都有的和 watcher 数量相关的性能代价。但是！当所有数据都变了的时候，Angular 其实并不吃亏。依赖收集在初始化和数据变化的时候都需要重新收集依赖，这个代价在小量更新的时候几乎可以忽略，但在数据量庞大的时候也会产生一定的消耗。\r\n> \r\n> MVVM 渲染列表的时候，由于每一行都有自己的数据作用域，所以通常都是每一行有一个对应的 ViewModel 实例，或者是一个稍微轻量一些的利用原型继承的 \"scope\" 对象，但也有一定的代价。所以，MVVM 列表渲染的初始化几乎一定比 React 慢，因为创建 ViewModel / scope 实例比起 Virtual DOM 来说要昂贵很多。这里所有 MVVM 实现的一个共同问题就是在列表渲染的数据源变动时，尤其是当数据是全新的对象时，如何有效地复用已经创建的 ViewModel 实例和 DOM 元素。假如没有任何复用方面的优化，由于数据是 “全新” 的，MVVM 实际上需要销毁之前的所有实例，重新创建所有实例，最后再进行一次渲染！这就是为什么题目里链接的 angular/knockout 实现都相对比较慢。相比之下，React 的变动检查由于是 DOM 结构层面的，即使是全新的数据，只要最后渲染结果没变，那么就不需要做无用功。\r\n> \r\n> Angular 和 Vue 都提供了列表重绘的优化机制，也就是 “提示” 框架如何有效地复用实例和 DOM 元素。比如数据库里的同一个对象，在两次前端 API 调用里面会成为不同的对象，但是它们依然有一样的 uid。这时候你就可以提示 track by uid 来让 Angular 知道，这两个对象其实是同一份数据。那么原来这份数据对应的实例和 DOM 元素都可以复用，只需要更新变动了的部分。或者，你也可以直接 track by $index 来进行 “原地复用”：直接根据在数组里的位置进行复用。在题目给出的例子里，如果 angular 实现加上 track by $index 的话，后续重绘是不会比 React 慢多少的。甚至在 dbmonster 测试中，Angular 和 Vue 用了 track by $index 以后都比 React 快: dbmon (注意 Angular 默认版本无优化，优化过的在下面）\r\n> \r\n> 顺道说一句，React 渲染列表的时候也需要提供 key 这个特殊 prop，本质上和 track-by 是一回事。\r\n> \r\n> ### 4. 性能比较也要看场合\r\n> 在比较性能的时候，要分清楚初始渲染、小量数据更新、大量数据更新这些不同的场合。Virtual DOM、脏检查 MVVM、数据收集 MVVM 在不同场合各有不同的表现和不同的优化需求。Virtual DOM 为了提升小量数据更新时的性能，也需要针对性的优化，比如 shouldComponentUpdate 或是 immutable data。\r\n> \r\n> * 初始渲染：Virtual DOM > 脏检查 >= 依赖收集\r\n> * 小量数据更新：依赖收集 >> Virtual DOM + 优化 > 脏检查（无法优化） > Virtual DOM 无优化\r\n> * 大量数据更新：脏检查 + 优化 >= 依赖收集 + 优化 > Virtual DOM（无法/无需优化）>> MVVM 无优化\r\n> \r\n> 不要天真地以为 Virtual DOM 就是快，diff 不是免费的，batching 么 MVVM 也能做，而且最终 patch 的时候还不是要用原生 API。在我看来 Virtual DOM 真正的价值从来都不是性能，而是它 1) 为函数式的 UI 编程方式打开了大门；2) 可以渲染到 DOM 以外的 backend，比如 ReactNative。\r\n> \r\n> ### 5. 总结\r\n> 以上这些比较，更多的是对于框架开发研究者提供一些参考。主流的框架 + 合理的优化，足以应对绝大部分应用的性能需求。如果是对性能有极致需求的特殊情况，其实应该牺牲一些可维护性采取手动优化：比如 Atom 编辑器在文件渲染的实现上放弃了 React 而采用了自己实现的 tile-based rendering；又比如在移动端需要 DOM-pooling 的虚拟滚动，不需要考虑顺序变化，可以绕过框架的内置实现自己搞一个。\r\n> \r\n> 附上尤大的回答链接\r\n> 链接：https://www.zhihu.com/question/31809713/answer/53544875\r\n\r\n",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/33",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/33/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/33/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/33/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/33",
      "id": 689729427,
      "node_id": "MDU6SXNzdWU2ODk3Mjk0Mjc=",
      "number": 33,
      "title": "介绍 HTTPS 握手过程 ",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-09-01T01:17:08Z",
      "updated_at": "2020-09-01T01:17:08Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "> * 客户端使用https的url访问web服务器,要求与服务器建立ssl连接\r\n> * web服务器收到客户端请求后, 会将网站的证书(包含公钥)传送一份给客户端\r\n> * 客户端收到网站证书后会检查证书的颁发机构以及过期时间, 如果没有问题就随机产生一个秘钥\r\n> * 客户端利用公钥将会话秘钥加密, 并传送给服务端, 服务端利用自己的私钥解密出会话秘钥\r\n> * 之后服务器与客户端使用秘钥加密传输\r\n",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/32",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/32/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/32/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/32/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/32",
      "id": 689726267,
      "node_id": "MDU6SXNzdWU2ODk3MjYyNjc=",
      "number": 32,
      "title": "介绍 HTTPS 握手过程中，客户端如何验证证书的合法性",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-09-01T01:09:09Z",
      "updated_at": "2020-09-01T01:09:09Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "1、首先什么是HTTP协议?\r\n     http协议是超文本传输协议，位于tcp/ip四层模型中的应用层；通过请求/响应的方式在客户端和服务器之间进行通信；但是缺少安全性，http协议信息传输是通过明文的方式传输，不做任何加密，相当于在网络上裸奔；容易被中间人恶意篡改，这种行为叫做中间人攻击；\r\n2、加密通信：\r\n    为了安全性，双方可以使用对称加密的方式key进行信息交流，但是这种方式对称加密秘钥也会被拦截，也不够安全，进而还是存在被中间人攻击风险；\r\n   于是人们又想出来另外一种方式，使用非对称加密的方式；使用公钥/私钥加解密；通信方A发起通信并携带自己的公钥，接收方B通过公钥来加密对称秘钥；然后发送给发起方A；A通过私钥解密；双发接下来通过对称秘钥来进行加密通信；但是这种方式还是会存在一种安全性；中间人虽然不知道发起方A的私钥，但是可以做到偷天换日，将拦截发起方的公钥key;并将自己生成的一对公/私钥的公钥发送给B；接收方B并不知道公钥已经被偷偷换过；按照之前的流程，B通过公钥加密自己生成的对称加密秘钥key2;发送给A；\r\n  这次通信再次被中间人拦截，尽管后面的通信，两者还是用key2通信，但是中间人已经掌握了Key2;可以进行轻松的加解密；还是存在被中间人攻击风险；\r\n\r\n3、解决困境：权威的证书颁发机构CA来解决；\r\n   3.1制作证书：作为服务端的A，首先把自己的公钥key1发给证书颁发机构，向证书颁发机构进行申请证书；证书颁发机构有一套自己的公私钥，CA通过自己的私钥来加密key1,并且通过服务端网址等信息生成一个证书签名，证书签名同样使用机构的私钥进行加密；制作完成后，机构将证书发给A；\r\n   3.2校验证书真伪：当B向服务端A发起请求通信的时候，A不再直接返回自己的公钥，而是返回一个证书；\r\n   说明：各大浏览器和操作系统已经维护了所有的权威证书机构的名称和公钥。B只需要知道是哪个权威机构发的证书，使用对应的机构公钥，就可以解密出证书签名；接下来，B使用同样的规则，生成自己的证书签名，如果两个签名是一致的，说明证书是有效的；\r\n  签名验证成功后，B就可以再次利用机构的公钥，解密出A的公钥key1;接下来的操作，就是和之前一样的流程了；\r\n 3.3：中间人是否会拦截发送假证书到B呢？\r\n   因为证书的签名是由服务器端网址等信息生成的，并且通过第三方机构的私钥加密中间人无法篡改； 所以最关键的问题是证书签名的真伪；\r\n\r\n4、https主要的思想是在http基础上增加了ssl安全层，即以上认证过程；:\r\n\r\n_Originally posted by @GeekQiaQia in https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/74#issuecomment-478822258_",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/31",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/31/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/31/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/31/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/31",
      "id": 687735695,
      "node_id": "MDU6SXNzdWU2ODc3MzU2OTU=",
      "number": 31,
      "title": "以下代码输出结果是什么，并解释原因？",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2020-08-28T05:49:57Z",
      "updated_at": "2020-08-28T05:54:50Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "```js\r\nvar a = {n: 1};\r\nvar b = a;\r\na.x = a = {n: 2};\r\n\r\nconsole.log(a.x) \t\r\nconsole.log(b.x)\r\n```",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/30",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/30/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/30/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/30/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/30",
      "id": 687655431,
      "node_id": "MDU6SXNzdWU2ODc2NTU0MzE=",
      "number": 30,
      "title": "请设计一个懒人类，具有吃、喝、睡功能，具体信息请看以下描述！",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304121202,
          "node_id": "MDU6TGFiZWwyMzA0MTIxMjAy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/JS",
          "name": "JS",
          "color": "a7ea81",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2020-08-28T02:03:47Z",
      "updated_at": "2020-08-28T02:24:13Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "```js\r\nLazyMan('Tom');\r\n// Hi I am Tom\r\n\r\nLazyMan('Tom').sleep(10).eat('lunch');\r\n// Hi I am Tom\r\n// 等待了10秒...\r\n// I am eating lunch\r\n\r\nLazyMan('Tom').eat('lunch').drink('500ml牛奶').sleep(10).eat('dinner')\r\n// Hi I am Tom\r\n// I am eating lunch\r\n//喝了500ml牛奶...\r\n// 等待了10秒...\r\n// I am eating diner\r\n\r\nLazyMan('Tom').eat('lunch').eat('dinner').sleepFirst(5).sleep(10).eat('junk food').drink('10000ml奶茶');\r\n// Hi I am Tom\r\n// 等待了5秒...\r\n// I am eating lunch\r\n// I am eating dinner\r\n// 等待了10秒...\r\n// I am eating junk food\r\n//喝了10000ml奶茶...\r\n```",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/29",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/29/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/29/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/29/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/29",
      "id": 687191926,
      "node_id": "MDU6SXNzdWU2ODcxOTE5MjY=",
      "number": 29,
      "title": "opacity: 0、visibility: hidden、display: none 优劣和适用场景",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304110729,
          "node_id": "MDU6TGFiZWwyMzA0MTEwNzI5",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/CSS",
          "name": "CSS",
          "color": "0e8a16",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-27T12:11:26Z",
      "updated_at": "2020-08-27T12:11:26Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "1. display:none（不占空间，不能点击）\r\n2. visibility:hidden（占据空间，不能点击）隐藏后不会引起页面结构发生改变，不会撑开\r\n3. opacity:0 （占据空间，可以点击）\r\n\r\n> 其中opacity:0 和display:none，具有株连特性，如果祖先元素设有此属性，无论子元素怎么样都不会出现在DOM中。\r\n\r\n> 如果父节点元素为visibility:hidden，当子元素属性为visibility：visible 那么子元素就会显现出来。",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/28",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/28/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/28/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/28/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/28",
      "id": 686878110,
      "node_id": "MDU6SXNzdWU2ODY4NzgxMTA=",
      "number": 28,
      "title": "移动端 Retina 屏幕 1px 边框问题",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304110729,
          "node_id": "MDU6TGFiZWwyMzA0MTEwNzI5",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/CSS",
          "name": "CSS",
          "color": "0e8a16",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2020-08-27T01:58:27Z",
      "updated_at": "2020-08-27T02:32:07Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/27",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/27/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/27/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/27/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/27",
      "id": 686867395,
      "node_id": "MDU6SXNzdWU2ODY4NjczOTU=",
      "number": 27,
      "title": "介绍下 BFC、IFC、GFC 和 FFC",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304110729,
          "node_id": "MDU6TGFiZWwyMzA0MTEwNzI5",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/CSS",
          "name": "CSS",
          "color": "0e8a16",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-27T01:22:53Z",
      "updated_at": "2020-08-27T02:07:47Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/26",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/26/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/26/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/26/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/26",
      "id": 686863484,
      "node_id": "MDU6SXNzdWU2ODY4NjM0ODQ=",
      "number": 26,
      "title": "使用 JavaScript Proxy 实现简单的数据绑定",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304112752,
          "node_id": "MDU6TGFiZWwyMzA0MTEyNzUy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6",
          "name": "前端进阶",
          "color": "e5299a",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-27T01:11:29Z",
      "updated_at": "2020-08-27T02:02:05Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/25",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/25/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/25/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/25/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/25",
      "id": 686238427,
      "node_id": "MDU6SXNzdWU2ODYyMzg0Mjc=",
      "number": 25,
      "title": "防抖的作用是什么？请实现一个防抖函数",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304112752,
          "node_id": "MDU6TGFiZWwyMzA0MTEyNzUy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6",
          "name": "前端进阶",
          "color": "e5299a",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2020-08-26T11:21:37Z",
      "updated_at": "2020-08-27T02:05:46Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "> 防抖函数的作用\r\n\r\n控制函数在一定时间内执行的次数，防抖意味着N秒内函数只会执行一次，\r\n如果N秒内再次触发，则**重新**计算延迟时间",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/24",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/24/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/24/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/24/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/24",
      "id": 685942556,
      "node_id": "MDU6SXNzdWU2ODU5NDI1NTY=",
      "number": 24,
      "title": "实现一个基本的Promise",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304121202,
          "node_id": "MDU6TGFiZWwyMzA0MTIxMjAy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/JS",
          "name": "JS",
          "color": "a7ea81",
          "default": false,
          "description": ""
        },
        {
          "id": 2304112752,
          "node_id": "MDU6TGFiZWwyMzA0MTEyNzUy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6",
          "name": "前端进阶",
          "color": "e5299a",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-26T01:48:49Z",
      "updated_at": "2020-08-27T02:07:25Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/23",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/23/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/23/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/23/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/23",
      "id": 685938960,
      "node_id": "MDU6SXNzdWU2ODU5Mzg5NjA=",
      "number": 23,
      "title": "打印出1-1000之间的所有的对称数",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304115719,
          "node_id": "MDU6TGFiZWwyMzA0MTE1NzE5",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/%E7%AE%97%E6%B3%95",
          "name": "算法",
          "color": "fbca04",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2020-08-26T01:36:55Z",
      "updated_at": "2020-08-27T02:04:00Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "> 描述： 例如 11、22、121、1221、等等 数字翻转后与原来相等",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/22",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/22/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/22/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/22/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/22",
      "id": 685195111,
      "node_id": "MDU6SXNzdWU2ODUxOTUxMTE=",
      "number": 22,
      "title": "react-router 的 <Link> 标签和 <a> 标签有什么区别",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304112752,
          "node_id": "MDU6TGFiZWwyMzA0MTEyNzUy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6",
          "name": "前端进阶",
          "color": "e5299a",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2020-08-25T05:56:33Z",
      "updated_at": "2020-08-27T02:06:20Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "从最终渲染的DOM来看，这两者都是\\<a>标签，\r\n在react-router中\\<Link>标签需要配合\\<Route>标签做路由跳转，react-router接管了其默认的跳转行为，\r\n有别于传统的页面跳转，且\\<Link>的跳转只触发相匹配的\\<Route>对应页面内容更新，不会刷新整个页面。\r\n而\\<a>标签是普通的超链接，用于从当前页面跳转到href指向的另一个页面（非锚点情况）",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/21",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/21/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/21/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/21/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/21",
      "id": 684332667,
      "node_id": "MDU6SXNzdWU2ODQzMzI2Njc=",
      "number": 21,
      "title": " 两数之和",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304115719,
          "node_id": "MDU6TGFiZWwyMzA0MTE1NzE5",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/%E7%AE%97%E6%B3%95",
          "name": "算法",
          "color": "fbca04",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2020-08-24T03:29:38Z",
      "updated_at": "2020-08-27T02:04:28Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\r\n\r\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。\r\n\r\n示例:\r\n> 给定 nums = [2, 7, 11, 15], target = 9\r\n因为 nums[0] + nums[1] = 2 + 7 = 9\r\n所以返回 [0, 1]\r\n",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/20",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/20/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/20/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/20/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/20",
      "id": 684320300,
      "node_id": "MDU6SXNzdWU2ODQzMjAzMDA=",
      "number": 20,
      "title": "在输入框中如何判断输入的是一个正确的网址",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304121202,
          "node_id": "MDU6TGFiZWwyMzA0MTIxMjAy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/JS",
          "name": "JS",
          "color": "a7ea81",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-24T02:46:09Z",
      "updated_at": "2020-08-27T02:20:15Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "```js\r\nconst isUrl = urlStr => {\r\n    try {\r\n        const { href, origin, host, hostname, pathname } = new URL(urlStr)\r\n        return href && origin && host && hostname && pathname && true\r\n    } catch (e) {\r\n        return false\r\n    }\r\n}\r\n```",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/19",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/19/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/19/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/19/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/19",
      "id": 684308041,
      "node_id": "MDU6SXNzdWU2ODQzMDgwNDE=",
      "number": 19,
      "title": "实现 convert 方法，把原始 list 转换成树形结构，要求尽可能降低时间复杂度",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304115719,
          "node_id": "MDU6TGFiZWwyMzA0MTE1NzE5",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/%E7%AE%97%E6%B3%95",
          "name": "算法",
          "color": "fbca04",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2020-08-24T02:01:21Z",
      "updated_at": "2020-08-27T02:16:52Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "> 以下数据结构中，id 代表部门编号，name 是部门名称，parentId 是父部门编号，为 0 代表一级部门，现在要求实现一个 convert 方法，把原始 list 转换成树形结构，parentId 为多少就挂载在该 id 的属性 children 数组下，结构如下：\r\n```js\r\n// 原始 list 如下\r\nlet list =[\r\n    {id:1,name:'部门A',parentId:0},\r\n    {id:2,name:'部门B',parentId:0},\r\n    {id:3,name:'部门C',parentId:1},\r\n    {id:4,name:'部门D',parentId:1},\r\n    {id:5,name:'部门E',parentId:2},\r\n    {id:6,name:'部门F',parentId:3},\r\n    {id:7,name:'部门G',parentId:2},\r\n    {id:8,name:'部门H',parentId:4}\r\n];\r\nconst result = convert(list, ...);\r\n\r\n// 转换后的结果如下\r\nlet result = [\r\n    {\r\n      id: 1,\r\n      name: '部门A',\r\n      parentId: 0,\r\n      children: [\r\n        {\r\n          id: 3,\r\n          name: '部门C',\r\n          parentId: 1,\r\n          children: [\r\n            {\r\n              id: 6,\r\n              name: '部门F',\r\n              parentId: 3\r\n            }, {\r\n              id: 16,\r\n              name: '部门L',\r\n              parentId: 3\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          id: 4,\r\n          name: '部门D',\r\n          parentId: 1,\r\n          children: [\r\n            {\r\n              id: 8,\r\n              name: '部门H',\r\n              parentId: 4\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n  ···\r\n];\r\n```",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/18",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/18/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/18/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/18/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/18",
      "id": 683520064,
      "node_id": "MDU6SXNzdWU2ODM1MjAwNjQ=",
      "number": 18,
      "title": "给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log(m+n))",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304115719,
          "node_id": "MDU6TGFiZWwyMzA0MTE1NzE5",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/%E7%AE%97%E6%B3%95",
          "name": "算法",
          "color": "fbca04",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2020-08-21T12:17:43Z",
      "updated_at": "2020-08-27T02:16:52Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "示例 1：\r\n> nums1 = [1, 3]\r\nnums2 = [2]\r\n\r\n中位数是 2.0\r\n\r\n示例 2：\r\n\r\n> nums1 = [1, 2]\r\nnums2 = [3, 4]\r\n\r\n中位数是(2 + 3) / 2 = 2.5",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/17",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/17/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/17/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/17/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/17",
      "id": 683498701,
      "node_id": "MDU6SXNzdWU2ODM0OTg3MDE=",
      "number": 17,
      "title": "模拟实现一个深拷贝，并考虑对象相互引用以及 Symbol 拷贝的情况",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304121202,
          "node_id": "MDU6TGFiZWwyMzA0MTIxMjAy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/JS",
          "name": "JS",
          "color": "a7ea81",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-21T11:35:55Z",
      "updated_at": "2020-08-27T02:12:30Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "```js\r\n\r\nvar testobj={\r\n    num: 0,\r\n    str: '',\r\n    boolean: true,\r\n    unf: undefined,\r\n    nul: null,\r\n    obj: {\r\n        name: '我是一个对象',\r\n        id: 1,\r\n        qwe: {\r\n            a: 1\r\n        }\r\n    },\r\n    arr: [0, 1, 2, {b: 2}],\r\n    date: new Date(0),\r\n    reg: /我是一个正则/ig,\r\n    [Symbol('1')]: 1,\r\n    func() {\r\n        console.log(123)\r\n    }\r\n}\r\n\r\nfunction deepclone(obj,map=new WeakMap()){\r\n    if(obj instanceof Date) return new Date(obj);\r\n    if(obj instanceof RegExp) return new RegExp(obj)\r\n    if(obj==null || typeof obj !='object'){\r\n        return obj\r\n    }\r\n    if(map.has(obj)){\r\n        return map.get(obj)\r\n    }\r\n    let t = new obj.constructor()\r\n    map.set(obj,t)\r\n    let keys=[...Object.getOwnPropertyNames(obj),...Object.getOwnPropertySymbols(obj)]\r\n    for(let key of keys){\r\n        t[key]=deepclone(obj[key],map)\r\n    }\r\n\r\n    return t\r\n}\r\n\r\nlet result=deepclone(testobj)\r\nresult.data=new Date()\r\nconsole.log(result,testobj)\r\n```\r\n## 运行结果\r\n```js\r\n{\r\n  num: 0,\r\n  str: '',\r\n  boolean: true,\r\n  unf: undefined,\r\n  nul: null,\r\n  obj: { name: '我是一个对象', id: 1, qwe: { a: 1 } },\r\n  arr: [ 0, 1, 2, { b: 2 } ],\r\n  date: 1970-01-01T00:00:00.000Z,\r\n  reg: /我是一个正则/gi,\r\n  func: [Function: func],\r\n  data: 2020-08-21T11:30:05.269Z,\r\n  [Symbol(1)]: 1\r\n} {\r\n  num: 0,\r\n  str: '',\r\n  boolean: true,\r\n  unf: undefined,\r\n  nul: null,\r\n  obj: { name: '我是一个对象', id: 1, qwe: { a: 1 } },\r\n  arr: [ 0, 1, 2, { b: 2 } ],\r\n  date: 1970-01-01T00:00:00.000Z,\r\n  reg: /我是一个正则/gi,\r\n  func: [Function: func],\r\n  [Symbol(1)]: 1\r\n}\r\n```",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/16",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/16/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/16/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/16/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/16",
      "id": 683240191,
      "node_id": "MDU6SXNzdWU2ODMyNDAxOTE=",
      "number": 16,
      "title": "React 和 Vue 的 diff 时间复杂度从 O(n^3) 优化到 O(n) ，那么 O(n^3) 和 O(n) 是如何计算出来的？",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304139583,
          "node_id": "MDU6TGFiZWwyMzA0MTM5NTgz",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/React",
          "name": "React",
          "color": "ef3b09",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-21T03:52:59Z",
      "updated_at": "2020-08-27T02:18:13Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "原问题标题“React 和 Vue 的 diff 时间复杂度从 O(n^3) 优化到 O(n) ，那么 O(n^3) 和 O(n) 是如何计算出来的？ ”\r\n\r\n这里的n指的是页面的VDOM节点数，这个不太严谨。如果更严谨一点，我们应该应该假设 变化之前的节点数为m，变化之后的节点数为n。\r\n\r\nReact 和 Vue 做优化的前提是“放弃了最优解“，本质上是一种权衡，有利有弊。\r\n\r\n倘若这个算法用到别的行业，比如医药行业，肯定是不行的，为什么？\r\n\r\nReact 和 Vue 做的假设是：\r\n\r\n检测VDOM的变化只发生在同一层\r\n检测VDOM的变化依赖于用户指定的key\r\n如果变化发生在不同层或者同样的元素用户指定了不同的key或者不同元素用户指定同样的key， React 和 Vue都不会检测到，就会发生莫名其妙的问题。\r\n\r\n但是React 认为， 前端碰到上面的第一种情况概率很小，第二种情况又可以通过提示用户，让用户去解决，因此 这个取舍是值得的。 没有牺牲空间复杂度，却换来了在大多数情况下时间上的巨大提升。 明智的选择！\r\n\r\n## 基本概念\r\n首先大家要有个基本概念。\r\n\r\n其实这是一个典型的最小编辑距离的问题，相关算法有很多，比如Git中 ，提交之前会进行一次对象的diff操作，就是用的这个最小距离编辑算法。\r\n\r\nleetcode 有原题目, 如果想明白这个O(n^3)， 可以先看下这个。\r\n\r\n对于树，我们也是一样的，我们定义三种操作，用来将一棵树转化为另外一棵树：\r\n\r\n删除 删除一个节点，将它的children交给它的父节点\r\n\r\n插入 在children中 插入一个节点\r\n\r\n修改 修改节点的值\r\n\r\n事实上，从一棵树转化为另外一棵树，我们有很多方式，我们要找到最少的。\r\n\r\n直观的方式是用动态规划，通过这种记忆化搜索减少时间复杂度。\r\n\r\n## 算法\r\n由于树是一种递归的数据结构，因此最简单的树的比较算法是递归处理。\r\n\r\n详细描述这个算法可以写一篇很长的论文，这里不赘述。 大家想看代码的，这里有[一份](https://github.com/DatabaseGroup/tree-similarity/tree/develop) 我希望没有吓到你。\r\n\r\n确切地说，树的最小距离编辑算法的时间复杂度是O(n^2m(1+logmn)), 我们假设m 与 n 同阶， 就会变成 O(n^3)。",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/15",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/15/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/15/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/15/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/15",
      "id": 683228357,
      "node_id": "MDU6SXNzdWU2ODMyMjgzNTc=",
      "number": 15,
      "title": "写出以下代码打印结果",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304121202,
          "node_id": "MDU6TGFiZWwyMzA0MTIxMjAy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/JS",
          "name": "JS",
          "color": "a7ea81",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2020-08-21T03:17:42Z",
      "updated_at": "2020-08-27T02:15:22Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "```js\r\nfunction changeObjProperty(o) {\r\n  o.siteUrl = \"http://www.baidu.com\"\r\n  o = new Object()\r\n  o.siteUrl = \"http://www.google.com\"\r\n} \r\nlet webSite = new Object();\r\nchangeObjProperty(webSite);\r\nconsole.log(webSite.siteUrl);\r\n```",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/14",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/14/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/14/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/14/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/14",
      "id": 683210296,
      "node_id": "MDU6SXNzdWU2ODMyMTAyOTY=",
      "number": 14,
      "title": "输出以下打印结果",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304121202,
          "node_id": "MDU6TGFiZWwyMzA0MTIxMjAy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/JS",
          "name": "JS",
          "color": "a7ea81",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-21T02:23:54Z",
      "updated_at": "2020-08-27T02:15:22Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "```js\r\nfunction Foo() {\r\n    Foo.a = function() {\r\n        console.log(1)\r\n    }\r\n    this.a = function() {\r\n        console.log(2)\r\n    }\r\n}\r\nFoo.prototype.a = function() {\r\n    console.log(3)\r\n}\r\nFoo.a = function() {\r\n    console.log(4)\r\n}\r\nFoo.a();\r\nlet obj = new Foo();\r\nobj.a();\r\nFoo.a();\r\n```\r\n## 解析\r\n```js\r\nfunction Foo() {\r\n    Foo.a = function() {\r\n        console.log(1)\r\n    }\r\n    this.a = function() {\r\n        console.log(2)\r\n    }\r\n}\r\n// 以上只是 Foo 的构建方法，没有产生实例，此刻也没有执行\r\nFoo.prototype.a = function() {\r\n    console.log(3)\r\n}\r\n// 现在在 Foo 上挂载了原型方法 a ，方法输出值为 3\r\nFoo.a = function() {\r\n    console.log(4)\r\n}\r\n// 现在在 Foo 上挂载了直接方法 a ，输出值为 4\r\n\r\nFoo.a();\r\n// 立刻执行了 Foo 上的 a 方法，也就是刚刚定义的，所以\r\n// # 输出 4\r\n\r\nlet obj = new Foo();\r\n/* 这里调用了 Foo 的构建方法。Foo 的构建方法主要做了两件事：\r\n1. 将全局的 Foo 上的直接方法 a 替换为一个输出 1 的方法。\r\n2. 在新对象上挂载直接方法 a ，输出值为 2。\r\n*/\r\n\r\nobj.a();\r\n// 因为有直接方法 a ，不需要去访问原型链，所以使用的是构建方法里所定义的 this.a，\r\n// # 输出 2\r\n\r\nFoo.a();\r\n// 构建方法里已经替换了全局 Foo 上的 a 方法，所以\r\n// # 输出 1\r\n\r\n```\r\n\r\n\r\n",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/13",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/13/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/13/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/13/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/13",
      "id": 683201861,
      "node_id": "MDU6SXNzdWU2ODMyMDE4NjE=",
      "number": 13,
      "title": "不用加减乘除运算符，求整数的7倍",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304121202,
          "node_id": "MDU6TGFiZWwyMzA0MTIxMjAy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/JS",
          "name": "JS",
          "color": "a7ea81",
          "default": false,
          "description": ""
        },
        {
          "id": 2304115719,
          "node_id": "MDU6TGFiZWwyMzA0MTE1NzE5",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/%E7%AE%97%E6%B3%95",
          "name": "算法",
          "color": "fbca04",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-21T01:56:24Z",
      "updated_at": "2020-08-27T02:16:51Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "## 可以使用三类方式：位运算加法、JS hack、进制转换。实现方式分别如下：\r\n这道题的关键在于不能使用运算符号，那么一个直接的思路就是能不能不用加减乘除实现整数的加减法呢？其实不难，复习一下大学课本里面计算机组成原理，应该能想起来如何实现基本的加减乘除法。这里，我们其实只需要实现一个基本的加法：\r\n|  a  |  b  | a+b | 进位 |\r\n| :-: | :-: | :-: |  :-: |\r\n|  0  |  0  |  0  |  无  |\r\n|  1  |  0  |  1  |  无  |\r\n|  0  |  1  |  1  |  无  |\r\n|  1  |  1  |  0  |  有  |\r\n> 从上面的表可以看出一种实现简单的多位二进制整数加法的算法如下\r\n\r\nm 和 n 是两个二进制整数，求 m+n:\r\n\r\n1. 用与运算求m和n共同为\"1\"的位：m' = m & n\r\n2. 用异或运算求m和n其中一个为\"1\"的位: n' = m ^ n\r\n3. 如果m'不为0，那么将m'左移一位（进位），即 m = m' << 1，即 n = n'，跳回到步骤 1\r\n4. 如果 m'为0，那么n'就是我们要求的结果\r\n\r\n```js\r\n/* -- 位运算 -- */\r\n// 先定义位运算加法\r\nfunction bitAdd(m, n){\r\n    while(m){\r\n        [m, n] = [(m & n) << 1, m ^ n];\r\n    }\r\n    return n;\r\n}\r\n\r\n// 位运算实现方式 1 - 循环累加7次\r\nlet multiply7_bo_1 = (num)=>\r\n{\r\n  let sum = 0,counter = new Array(7); // 得到 [empty × 7]\r\n  while(counter.length){\r\n    sum = bitAdd(sum, num);\r\n    counter.shift();\r\n  }\r\n  return sum;\r\n}\r\n\r\n// 位运算实现方式 2 - 二进制进3位(乘以8)后，加自己的补码(乘以-1)\r\nlet multiply7_bo_2 = (num) => bitAdd(num << 3, -num) ;\r\n\r\n/* -- JS hack -- */\r\n\r\n// hack 方式 1 - 利用 Function 的构造器 & 乘号的字节码\r\nlet multiply7_hack_1 = (num) => \r\n    new Function([\"return \",num,String.fromCharCode(42),\"7\"].join(\"\"))();\r\n\r\n// hack 方式 2 - 利用 eval 执行器 & 乘号的字节码\r\nlet multiply7_hack_2 = (num) => \r\n\t\teval([num,String.fromCharCode(42),\"7\"].join(\"\"));\r\n\r\n// hack 方式 3 - 利用 SetTimeout 的参数 & 乘号的字节码\r\nsetTimeout([\"window.multiply7_hack_3=(num)=>(7\",String.fromCharCode(42),\"num)\"].join(\"\"))\r\n\r\n/* -- 进制转换 -- */\r\n\r\n// 进制转换方式 - 利用 toString 转为七进制整数；然后末尾补0(左移一位)后通过 parseInt 转回十进制\r\nlet multiply7_base7 = \r\n    (num)=>parseInt([num.toString(7),'0'].join(''),7);\r\n```",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/12",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/12/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/12/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/12/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/12",
      "id": 682724933,
      "node_id": "MDU6SXNzdWU2ODI3MjQ5MzM=",
      "number": 12,
      "title": "修改以下 print 函数，使之输出 0 到 99，或者 99 到 0 ",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304121202,
          "node_id": "MDU6TGFiZWwyMzA0MTIxMjAy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/JS",
          "name": "JS",
          "color": "a7ea81",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-20T13:37:25Z",
      "updated_at": "2020-08-27T02:15:22Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "要求：\r\n\r\n1、只能修改 setTimeout 到 Math.floor(Math.random() * 1000 的代码\r\n\r\n2、不能修改 Math.floor(Math.random() * 1000\r\n\r\n3、不能使用全局变量\r\n```js\r\nfunction print(n){\r\n  setTimeout(() => {\r\n    console.log(n);\r\n  }, Math.floor(Math.random() * 1000));\r\n}\r\nfor(var i = 0; i < 100; i++){\r\n  print(i);\r\n}\r\n```\r\n## 修改后\r\n```js\r\nfunction print(n){\r\n  setTimeout((() => {\r\n    console.log(n)\r\n    return ()=>{}\r\n  }).call(n,[]), Math.floor(Math.random() * 1000));\r\n}\r\nfor(var i = 0; i < 100; i++){\r\n  print(i);\r\n}\r\n```",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/11",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/11/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/11/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/11/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/11",
      "id": 681495501,
      "node_id": "MDU6SXNzdWU2ODE0OTU1MDE=",
      "number": 11,
      "title": "找出字符串中连续出现最多的字符和个数",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304121202,
          "node_id": "MDU6TGFiZWwyMzA0MTIxMjAy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/JS",
          "name": "JS",
          "color": "a7ea81",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-19T02:16:47Z",
      "updated_at": "2020-08-27T02:15:22Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "- 'abcaakjbb' => {'a':2,'b':2}\r\n- 'abbkejsbcccwqaa' => {'c':3}\r\n注意：是连续字符\r\n```js\r\nfunction getmaxlen(str){\r\n   if(str){\r\n       let matchStr=str.match(/(\\w)\\1*/g);\r\n       let lenArr=matchStr.map(item=>item.length);\r\n       let maxLen=Math.max(...lenArr);\r\n       return matchStr.reduce((res,cur)=>{\r\n                if(cur.length===maxLen){\r\n                  res[cur]=maxLen\r\n                }\r\n                return res\r\n              },{})\r\n   }\r\n   return {}\r\n}\r\ngetmaxlen('abbkejsbcccwqaa')\r\n// => {ccc: 3}\r\n```",
      "performed_via_github_app": null
    },
    {
      "url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/10",
      "repository_url": "https://api.github.com/repos/guyuezhai/interviewSummary",
      "labels_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/10/labels{/name}",
      "comments_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/10/comments",
      "events_url": "https://api.github.com/repos/guyuezhai/interviewSummary/issues/10/events",
      "html_url": "https://github.com/guyuezhai/interviewSummary/issues/10",
      "id": 681483489,
      "node_id": "MDU6SXNzdWU2ODE0ODM0ODk=",
      "number": 10,
      "title": "隐式类型转换计算",
      "user": {
        "login": "guyuezhai",
        "id": 24433701,
        "node_id": "MDQ6VXNlcjI0NDMzNzAx",
        "avatar_url": "https://avatars3.githubusercontent.com/u/24433701?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guyuezhai",
        "html_url": "https://github.com/guyuezhai",
        "followers_url": "https://api.github.com/users/guyuezhai/followers",
        "following_url": "https://api.github.com/users/guyuezhai/following{/other_user}",
        "gists_url": "https://api.github.com/users/guyuezhai/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guyuezhai/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guyuezhai/subscriptions",
        "organizations_url": "https://api.github.com/users/guyuezhai/orgs",
        "repos_url": "https://api.github.com/users/guyuezhai/repos",
        "events_url": "https://api.github.com/users/guyuezhai/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guyuezhai/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 2304121202,
          "node_id": "MDU6TGFiZWwyMzA0MTIxMjAy",
          "url": "https://api.github.com/repos/guyuezhai/interviewSummary/labels/JS",
          "name": "JS",
          "color": "a7ea81",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2020-08-19T01:37:04Z",
      "updated_at": "2020-08-27T02:15:21Z",
      "closed_at": null,
      "author_association": "OWNER",
      "active_lock_reason": null,
      "body": "# # 求以下运算结果\r\n\r\n1 + \"1\"\r\n\r\n2 * \"2\"\r\n\r\n[1, 2] + [2, 1]\r\n\r\n\"a\" + + \"b\"\r\n\r\n- 1 + \"1\"\r\n> 加性操作符：如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接起来\r\n\r\n所以值为：“11”\r\n\r\n- 2 * \"2\"\r\n> 乘性操作符：如果有一个操作数不是数值，则在后台调用 Number()将其转换为数值\r\n\r\n- [1, 2] + [2, 1]\r\n> Javascript中所有对象基本都是先调用valueOf方法，如果不是数值，再调用toString方法。\r\n\r\n所以两个数组对象的toString方法相加，值为：\"1,22,1\"\r\n\r\n- \"a\" + + \"b\"\r\n> 后边的“+”将作为一元操作符，如果操作数是字符串，将调用Number方法将该操作数转为数值，如果操作数无法转为数值，则为NaN。\r\n\r\n所以值为：\"aNaN\"",
      "performed_via_github_app": null
    }
  ]


export default data
